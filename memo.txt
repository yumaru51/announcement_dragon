【今日やること】
ModelFormの後ろに「,」がつくとタプルになる！！！！
タプル(1,2,3,4)
タプルじゃないと、ModelForm形式


EXCEL表とかに一旦データまとめて、50件くらい入れたいかも、、、、

入力のとこ2段にしたい。
コメントのとこ、メモか頭に入れたら消す！
めもにまとめる「python\【マニュアル】配列変数ごちゃごちゃになるので整理.xlsx」
めもにまとめる「python\[python]めも.xlsx」（API～EXCEL）
登録処理したい。
　生活雑貨、収納棚、WTW-3HS、不動技研、3,5,3,4,5、軽いので移動しやすい。

サービス再起動しないと、formsのリスト更新されない。formsで初期リスト宣言じゃなくてviewにしよう。
転職サイト、言語で調べよう。


【めも】

【template】というかHTML
ラジオボタン、チェックボックス
nameを同じにすることでグループされ、djangoではnameがkeyとなる。
idは不要？普通は<form>や<label>で囲う？確認

<input type="radio" name="name" value="0">テキスト0
<input type="radio" name="name" value="1">テキスト1
<input type="radio" name="name" value="2">テキスト2

<input type="checkbox" name="name" value="1">テキスト1
<input type="checkbox" name="name" value="2">テキスト2
<input type="checkbox" name="name" value="3">テキスト3

チェックボックスをreadonlyにする
disabledだと薄灰色になって見にくい。readonlyは存在しない。
<input type='checkbox' onclick='return false;'>
<input type='checkbox' onclick='return false;' checked>

日付型
<input type="date" name="date" id="date">
時間型
<input type="time" name="time" id="time">
日時型
<input type="datetime-local" id="datetime-local" name="datetime-local" value="" min="" max="">


現在時刻を表示
django テンプレートタグ 現在時刻を表示 {% now %}
<input type="datetime-local" id="discovery_datetime" value="{% now 'Y-m-d\TH:i' %}">　フォーマット'yyyy-mm-dd tt:mm'形式
テンプレートタグ　エスケープシーケンスは「\」

ログインユーザー取得
{{ request.user }}

ログイン必須
djangoはURLを知っていれば直接アクセス可能だが、ログイン情報でページ処理をしたい場合は、ログイン必須の設定とする。
from django.contrib.auth.decorators import login_required
@login_required

def 関数名(requset):
    request.user.username

オプション一覧　※まとめる
自動補完無効
autocomplete="off"
入力モード
inputmode=mode
　数値入力: numeric;
テキストボックスにフォーカスを当てた時に全選択状態にする
onfocus="this.select();"


データの受け取り　
SELECT文・APIで指定した項目順に配列で変数へ格納される。
[index(項目)]は「変数.項目名」と直接項目名を書いてもよい。
件数が1件のとき[index(件数)]は省略できる。
①NG
TEST.[0].[0]
②for
for 各レコード in テーブル
    for 各項目 in 各レコード
        print(各項目)
③for
for 変数 in テーブル		#for文で各レコードを
    print(変数.[index(項目)])	#indexで各項目を
    print(変数.項目名)		#indexで各項目を


「変数.配列番号」で取得できる。index番号に[ ]はいらない。

for文でループしてindex指定する。
{% for 項目 in テーブル %}　for文で各レコードを
    {{ 項目.配列番号 }}　indexで各項目を
{% endfor %}

for文を使わない場合
{{ テーブル.レコード.項目)}}


多次元辞書型変数を分解
Modelと同じように手動で辞書型を作成してtemplateで利用したい場合、
多次元辞書型変数宣言　実際はModelなどをforに使う
dict = {}
for index in range(10):
    dict[index] = {
        'key1': values1,
        'key2': values2,
    }

中身　indexが件数のイメージ(「Modelもこうなってるよ」ってModelにまとめる。)
dict = {0: {'key1': 'values1', 'key2': 'values2'}, 1:{'key1': 'values1', 'key2': 'values2'}, 2:{'key1': 'values1', 'key2': 'values2'},,, }

keyはindexの件数となっているので表示はほぼ不要。valueにkey,valuesを持つ多次元辞書型となる。
{% for key, value in data.items %}
{{ key }}{{ value }}{{ value.key1 }}{{ value.key2 }},,,
{% endfor %}


プルダウン応用
view側でプルダウンリスト作成
def メソッド名(request):
    テーブル名 = テーブル名.objects.filter(項目__icontains=request.POST['name'], lost_flag=0)
    data = ''
    for テーブル名 in テーブル名:
        data += '<option value="' + テーブル名.項目名 + '">' + テーブル名.項目名 + ':' + テーブル名.項目名 + '</option>'
    ary = {
        'data': data,
    }
    return JsonResponse(ary)

HTMLを組み込んだ変数
{{ 変数 | safe }}

メールクライアント起動
mailto:ハンドラ　ブラウザのURLバーに入力する
mailto:address?subject&body=


複数リスト
Ctrlキーを押しながら複数選択できるリスト設置
<select id="id" name="name" size="5" multiple>
    <option value="value">text</option>
</select>

リストで取得できる
　変数 = $('#ID').val()　jQuery
　変数[0],変数[1],変数[2],,,,
件数を取得
　$('#ID option:selected').length　jQuery
チェックをつける
　document.getElementById('id').selected

空白コード　4種類ある
&emsp;
&nbsp;&nsp;&thinsp;  


loading画面について
ロード中のgif画像を「display:none」で設定しておき、javascriptの処理で表示、非表示を切り替える。
(divなしにはできないか？imgにidやstyleを追加すれば？)

<div id="loading_gif" style="position:absolute; left:50%; top:20%; margin-left:-300px; margin-top:300px; z-index: 10; display: none">
    <img src="{% static 'img/loading/earth.gif' %}">
</div>

処理の最初で「show()」で表示にする。
if($("#loading_gif") != null){
    $("#loading_gif").show();
}

処理後(.done)などに「fadeOut()」で非表示にする。
.done(function(data){
    if($("#loading_gif") != null){
        $("#loading_gif").fadeOut();　//呼び出し中に表示するgifをフェードアウト
    }
    alert(data.massage)
})

href応用
リンククリック時にjavascript実行
　<a href="javascript:処理;">
idに値を格納＆form送信
　<a href="javascript:$(#id).val({{ key }});form.submit()">

変数valueの改行コードを有効にする
{{ value|linebreaksbr }}


for
組み込みテンプレートタグのfor内で用意されている変数
forloop.counter　　ループの現在の繰り返し(1インデックス)
forloop.counter0　　ループの現在の繰り返し(0インデックス)
forloop.revcounter　　ループの終了からの反復回数(1インデックス)
forloop.revcounter0　　ループの終了からの反復回数(0インデックス)
forloop.first　　ループの開始真
forloop.last　　ループの終了真
forloop.parentloop　　入れ子になったループの場合は、現在のループを囲むループ


【form】
formタグは入れ子にできない

<form>は基本<button>でsubmitするとき<button>を<form>内側に入れて紐づけを行うが、
<form>にidをつけることで、<form>外でも紐づけを行うことができる。<button>のform属性と。
逆に言えば<form>内側に<button>を仕込めば<button>にform属性は不要。
　<form action="URL" name="fuge" id="hoge" method=""></form>
　<button class="" type="submit" form="hoge">submit</button>

<form>は基本<form>に送り先(action属性)を記述するが、<button>にformaction属性を追加すれば、<button>側で送り先を記述できる。
これによりボタンを複数置いて、ボタンごとに送り先を変更することができる。
また<form>にaction属性があっても、<button>にformaction属性がある場合は、formactionが優先される。
　<button class="" type="submit" formaction="URL" from="hoge">submit</button>


ボタンの種類
<button type="button">	何もしない、定義のみ。通常はonclickにjavascriptの処理を書く。
<button type="subit">	form送信
<button type="reset">	リセット

javascript処理でページ遷移
<button type="button" onclick="location.href='https://www.iskweb.co.jp/'">反応するボタン</button>
<button type="button" onclick="window.history.back();">戻るボタン</button>


【request】
データの受け渡し　request.POST(QueryDict)
エントリー処理などはPOST送信する。値がなくても処理が続行できる。
requestは{ key1: value1, key2: value2,,,, }辞書型で格納されている。keyはname属性となる。

html上に同nameが複数ある場合（ファイルやチェックボックスなど）getlistでlistとして取得する。単一にしたいときはforなどを使う。
　変数 = request.POST.getlist('name')

POSTはrequestデータ、GETはURLパラメータという理解！

存在チェック①
if 'key' in request.POST
    print(request.POST['key'])
存在チェック②
get()メソッドで判断・置換が可能。配列からkey指定で値をとりだすメソッド。
「default=」は省略可能。また第2パラメータ自体も省略可能。その場合はdefault値None。
「request.POST['name']」はNoneでエラーだが、下記はNone取得できる。
　request.GET.get('key', default=None)
　request.POST.get('key', default=None)


【views】
host名を取得
from socket import gethostname 
gethostname() 

半角全角の変換　ライブラリを利用する。
% pip install mojimoji


if
falseのとき
1. if cond is not True:
2. if not cond:

式が成り立つとき処理①を行う。is は「=」。
　変数 = 処理① if 式 is 判別式 else 処理②
　変数 = 処理① if 式 is not 判別式 else 処理②
　例　変数 = "" if 変数 is None else 変数

否定の条件式を設定したいとき、
if not A and B
Aは否定。Bは肯定となる。


フォーマット関数
　{インデックス番号:書式指定}.format(値)
例　"{0}さんの身長は{1}cmです。{0}さんの体重は{2}kgです。".format("山田", 190, 105.3)
　　山田さんの身長は190cm、体重は105.3kgです。

「,」金額表記形式。フォーマットが1つの場合省略できる。
"{:,}".format(値)

strftime関数
日時変数.strftime("%Y-%m-%d")
文字列変数.strptime("", "%Y年%#m月%#d日")


組み込み関数一覧　※まとめる
input()　入力された値を文字列として返す
print()　指定された値を出力する
+		結合　同じ型どうしで結合する。
,		連結　出力の際に半角スペースで結合する。型を意識しなくてもよい
sep引数		複数出力する際の区切り文字
end引数		改行せずに出力など
open()　ファイルを開く
str()　文字列型に変換する
int()　整数型に変換する
len()　文字列、リスト、タプル、辞書の長さ(要素数)を返す
raw文字列で無効化
r'filepath'でエスケープシーケンス無効化
/t,/n　タブ,改行


アプリ起動
Popen関数　プロセスをオープン
import subprocess  # コマンド実行モジュール
subprocess.Popen([‘start‘, r'filepath'], shell=True)

起動プログラム指定
subprocess.Popen([r'programpath', r'filepath'])

フォルダを開く
subprocess.Popen([‘explorer‘, r'folderpath'])


連続で動的に関数を呼び出し、リストに格納
①文字列の箇所を変数にすることで動的に関数呼び出しができる
function_name = '文字列' + '文字列'
globals()[function_name]()

②リスト変数を作成しておき、文字列変数をループ処理でリストに追加する
function_list = ['']
for 変数 in 変数:
    function_name = 変数 + '_info'
    function_list.append(globals()[function_name](パラメータ))


呼び出し関数でrenderの返り値を変数に格納して扱う
body要素取り出し
　変数.content
renderの返り値はbytes型なのでstr型に変換
　bytes型をdecodeでstr型に　変数.decode()
　str型をencodeでbytes型に　変数.encode()

呼び出し関数でjsonの返り値を変数に格納して扱う
body要素取り出し
　変数.content
jsonの返り値はbytes型なのでstr型に変換
　bytes型をdecodeでstr型に　変数.decode()
　str型をencodeでbytes型に　変数.encode()
HTML構文に書き出し
　imoprt json
　変数 = json.loads(変数)
　変数['key']


関数の設定
・POSTからでしかアクセスできない「@require_POST」
・ログインしていないとアクセスできない「@login_required」
可変長引数（*args, **kwargs）
*args: 複数の引数をタプルとして受け取る
**kwargs: 複数のキーワード引数を辞書として受け取る
 

カンマ自動付与
「settings.py」
「humanize」アプリを追加する
INSTALLED_APPS = [
    ...
    'django.contrib.humanize',
    ...
]
カンマ自動付与の位置を設定
NUMBER_GROUPING = 3

「template.html」
フィルターで指定
{{ value | intcomma }} 


【return】
HttpResponse　ほんの細かな処理で「.html」も作成したくないとき。
htmlの中身を引数として渡すと、html形式で生成表示する。
    from django.http import HttpResponse

    test = DB.objects.all()
    for test in test:
        if test.user.username == request.user.username:
            return render(request, 'fms/parts/temporary_response/make_plantia_import_excel_page.html')
    return HttpResponse("<script>alert('アラート!');window.location.href = '../temporary_response_menu/';</script>")


redirect　既存のページに飛ばしたいとき。
from django.shortcuts import redirect
    return redirect('url.name', パラメータ)


render　指定されたテンプレートをレンダリングし、コンテキストデータを埋め込んだHTTPレスポンス
redirect　別のURLにリダイレクトするHTTPレスポンス
HttpResponse　任意の内容でHTTPレスポンスを返します。通常はカスタムレスポンスを作成する場合に使用される。
JsonResponse　jsonでエンコードされたデータを含むHTTPレスポンス。ajaxリクエストなどに使用。

get_object_or_404　指定されたクエリに一致するオブジェクトを取得します。一致するオブジェクトがない場合、404エラーを返します。
get_list_or_404　クエリに一致するオブジェクトのリストを取得します。リストが空の場合、404エラーを返します。
例: posts = get_list_or_404(Post, published=True)
HttpResponseRedirect　


【log】
handler: 出力先や使用するフォーマット、ファイル名など各種設定を用意
formatters: 具体的な出力時のフォーマットを設定
loggers: 使用するloggerの定義。上で設定したhandlerやformatterを紐付ける

import os

# ログ保存用設定
# LOG_ROOT = r'//Ydomnserv/common/部門間フォルダ/FacilityData/test'
LOG_ROOT = 'C:\\python_tool_development/isk-tools'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "info": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOG_ROOT + "/logs/django_info.log",
            "formatter": "verbose",
            "maxBytes": 1024 * 1024 * 1,  # ファイル容量
            "backupCount": 5,  # 最大保持数
        },
        "error": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOG_ROOT + "/logs/django_error.log",
            "formatter": "verbose",
            "maxBytes": 1024 * 1024 * 1,  # ファイル容量
            "backupCount": 5,  # 最大保持数
        },
    },
    "formatters": {
        "verbose": {
            "format": "\t".join(
                [
                    "[%(levelname)s]",  # DJANGO_LOG_LEVEL
                    "%(asctime)s",  # 時間
                    "%(name)s",  # loggerのname
                    "%(message)s",  #message
                ]
            )
        },
    },
    "loggers": {
        "info": {
            "handlers": ["info"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": True,
        },
        "error": {
            "handlers": ["error"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "ERROR"),
            "propagate": True,
        },
    },
}


各viewに例外処理を仕込む。
出力する内容は行数が長くなるので共通関数に分ける。

try:
    処理
except Exception:
    例外処理共通関数(request, traceback.format_exc())
    raise


ログに出力する内容を共通関数に書く。

def 例外処理共通関数(request, traceback_str):
    imort inspect
    import logging

# 呼び出し元関数、ファイル名、行数を取得
f_obj = inspect.currentframe().f_back
func_name = f_obj.f_code.co_name
file_name = os.path.basename(f_obj.f_code.co_filename)
lineno = str(f_obj.f_lineno)

# 情報文字列化
request_str = ',request:' + str(request) + ',POST:' + str(request.POST) + ',GET:' + str(request.GET)
traceback_str = ',exception:' + traceback_str

# ログ出力
log_msg = '[' + file_name + ':' + lineno + '].' + func_name + ':' + request_str + traceback_str
logger = logging.getLogger("error")
logger.error(log_msg)
return


【session】
defaultのDBの「django_session」

使い方
隠しパラメータhiddenなどはユーザーが改ざんできるのでよくない。
干渉されてこまる重要なデータを受け渡す場合、セッション変数を利用すること。関数間で変数の受け渡しができる。
requestの中に埋め込む場合、requestをパラメーターで送らなければいけない。

# 保存 関数aで
request.session['hoge'] = hoge
# 取得 関数bで
name = request.session['hoge']
# Noneの可能性がある場合は、上記だとエラーになるため「get」してNoneも取得
name = request.session.get('hoge')

設定
利用するにあたってsettings.pyで設定が必要(デフォルトで設定されている)
・INSTALLED_APPS に "django.contrib.sessions" が含まれていること
・MIDDLEWARE に "django.contrib.sessions.middleware.SessionMiddleware" が含まれていること
・SESSION_ENGINE が定義されていないか、または設定値が django.contrib.sessions.backends.db であること

有効時間
settings.pyに追加。秒数を設定
SESSION_COOKIE_AGE = 3600

削除
関数でセッション削除
del request.session['セッション名']
request.session.clear()

コマンドでDBから期限切れのセッションを削除
python manage.py clearsessions


【settings.py】
setting.pyを環境ごとに切り分ける

「manage.py」
# ホスト名によって、設定ファイルを切り替える。
from socket import gethostname

    host_name = gethostname()
    if host_name == 'YWEBSERV1':
        print('本番環境起動')
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.settings_product')
    elif host_name == 'I7161DD6':
        print('テスト環境起動')
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.settings_test')
    else:
        print('開発環境起動')
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.settings_develop')

「wsgi.py」
# ホスト名によって、設定ファイルを切り替える。
from socket import gethostname

host_name = gethostname()
if host_name == 'YWEBSERV1':
    os.environ['DJANGO_SETTINGS_MODULE'] = 'config.settings.settings_product'
elif host_name == 'I7161DD6':
    os.environ['DJANGO_SETTINGS_MODULE'] = 'config.settings.settings_test'
else:
    os.environ['DJANGO_SETTINGS_MODULE'] = 'config.settings.settings_develop'

「settigns_環境.py」
ホスト名によって、設定ファイルを切り替える。
環境ごとにsettingsファイルを作成し、共通の処理はすべてのファイルでimportする。

from .settings_common import *

# 動作許可ホスト(セキュリティ用設定)
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'ywebserv1',
]


【ファイルアップロード】
nameは記述しない？,idは別にする？,同じにすることでグループする。
<input type="file" id="id" name="name">



【明日やること】
●時間とってデザイン考える。JavaScript勉強。
●
●GETにするか、POSTにするか。
　URLイメージ　user_name/category1/category2/
　jqueryやめたいが、、、
●ネットワークにあげたい！！！スマホでも起動したい！
●DBファイル分けるか？ルーターにするか？
●VIEWフォルダに格納するか？

【備忘録】
仕様、
　自分がどのカテゴリのサイトを作りたいのか。「レビューサイト」や「比較サイト」
　最初は、ジャンル・製品は固定
　自分用→誰でも登録できるように、

